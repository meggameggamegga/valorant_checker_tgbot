import json
import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, state

from checker import ClientAcc
from db.base_db import DataBase
from keyboards.inline import auth_menu, cb

from main import bot,dp
from states.state import StartState
from valo_lib import Auth

db = DataBase('test.db')


from aiogram import types
from aiogram.dispatcher import FSMContext



@dp.message_handler(Command('start'), state='*')
async def start_cmnd(message: types.Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state:
        await state.reset_state()

    if not db.user_exist(message.from_user.id):
        db.add_user(message.from_user.id)


    welcome_message = (
        f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n'
        f'–Ø –±–æ—Ç-—á–µ–∫–µ—Ä –∏–≥—Ä—ã Valorant. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–∫–∏–Ω–æ–≤ –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. '
        f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏".'
    )

    await message.answer(welcome_message, parse_mode=types.ParseMode.MARKDOWN,reply_markup=auth_menu('Login'))

@dp.callback_query_handler(cb.filter(action='exit'),state='*')
@dp.callback_query_handler(cb.filter(action='cancel'),state='*')
@dp.callback_query_handler(cb.filter(action='login'),state='*')
async def auth_cmdn(call:types.CallbackQuery,state:FSMContext):
    cur_state = await state.get_state()
    if cur_state:
        await state.reset_state()
    welcome_message = (
        '–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ.\n'
        'üîê –ü—Ä–∏–º–µ—Ä: *username:password*'
    )
    await call.message.edit_text(welcome_message, parse_mode=types.ParseMode.MARKDOWN,reply_markup=auth_menu())
    await StartState.log_pass.set()



@dp.message_handler(state=StartState.log_pass, content_types=types.ContentTypes.TEXT)
async def auth_cmnd(message:types.Message, state: FSMContext):
    if len(message.text.split(':')) != 2:
        await message.answer('‚ö†–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',reply_markup=auth_menu('Cancel'))  # reply_markup –æ—Ç–º–µ–Ω–∞
    else:
        username, password = message.text.split(':')
        client = ClientAcc(username=username, password=password)
        result = await client.start()
        async with state.proxy() as data:
            data['username'] = username
            data['password'] = password
        if result:
            await message.delete()
            await message.answer(f'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
                                 f'üëã –ü—Ä–∏–≤–µ—Ç, *{result["name"]}*!\n'
                                 f'üìç –¢–≤–æ–π —Ä–µ–≥–∏–æ–Ω: *{result["region"].upper()}*', reply_markup=auth_menu(menu='Auth'),
                                 parse_mode=types.ParseMode.MARKDOWN)
            await state.reset_state(with_data=False)
        else:
            await message.answer('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–∞–ª–∏–¥–µ–Ω',reply_markup=auth_menu('Login'))
            await state.reset_state()

@dp.callback_query_handler(cb.filter(action='skins'))  # state
async def get_my_skins(call:types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        username = data['username']
        password = data['password']
    client = ClientAcc(username=username, password=password)
    items = await client.start('e7c63390-eda7-46e0-bb7a-a6abdacd2433')
    # –¢—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –º–æ–∏ ID —Å–∫–∏–Ω–æ–≤
    my_skin_codes = [item['ItemID'] for item in items['Entitlements']]
    # ID –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤
    with open('new_skins.json', 'r', encoding='UTF8') as skins_file:
        skins_data = json.load(skins_file)
    skin_names = []
    # –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–ª—é—á–µ–π ID —Å–∫–∏–Ω–∞
    for skin in skins_data.values():
        # –ï—Å–ª–∏ —Å–∫–∏–Ω ID –≤ –º–æ–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if skin['uuid'] in my_skin_codes:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            skin_names.append(skin['names'])

    if skin_names:
        answer_skins = 'üéÆ –¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–∫–∏–Ω–æ–≤ üéÆ:\n\n'
        for index, skin_name in enumerate(skin_names, start=1):
            answer_skins += f'{index}. {skin_name}\n'
    else:
        answer_skins = 'üö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. üö´'

    await call.message.edit_text(f'{answer_skins}\n'
                         f'üõçÔ∏è –í—Å–µ–≥–æ —Å–∫–∏–Ω–æ–≤: {len(skin_names)}',reply_markup=auth_menu('Auth'))



@dp.callback_query_handler(cb.filter(action='store'))#state
async def get_my_skins(call:types.CallbackQuery,state:FSMContext):
    answer_text = 'üéÅ –í–∞—à –º–∞–≥–∞–∑–∏–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ üéÅ:\n\n'
    async with state.proxy() as data:
        username = data['username']
        password = data['password']
    client = ClientAcc(username=username,password=password)
    items_store = await client.start(store=True)
    # –ú–æ–∏ —Å–∫–∏–Ω—ã
    skin_names = {}
    # –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ (ItemsID)
    my_skins_store =[items for items in items_store['SkinsPanelLayout']['SingleItemOffers']]

    #–ë–µ—Ä–µ–º –±–∞–∑—É —Å–æ —Å–∫–∏–Ω–∞–º–∏
    with open('new_skins.json', 'r', encoding='UTF8') as skins_file:
        skins_data = json.load(skins_file)
    for skin in skins_data.values():
        # –ï—Å–ª–∏ —Å–∫–∏–Ω ID –≤ –º–æ–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if skin['uuid'] in my_skins_store:
            for items in items_store['SkinsPanelLayout']['SingleItemStoreOffers']:
                price = [price for price in items['Cost'].values()][0]
                #rint(price)
                skin_names[skin["names"]]=price
    time_store = items_store['SkinsPanelLayout']['SingleItemOffersRemainingDurationInSeconds']
    for name,price in skin_names.items():
        answer_text+=f'{name}-{price}\n'
    await call.message.edit_text(f'{answer_text}\n'
                         f'‚è≥ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {int(time_store/3600)}—á.',reply_markup=auth_menu('Auth'))


@dp.callback_query_handler(cb.filter(action='account'))
async def get_account_info(call:types.CallbackQuery,state:FSMContext):
    ranks = {
        0: "UNRANKED",
        1: "Unused1",
        2: "Unused2",
        3: "IRON 1",
        4: "IRON 2",
        5: "IRON 3",
        6: "BRONZE 1",
        7: "BRONZE 2",
        8: "BRONZE 3",
        9: "SILVER 1",
        10: "SILVER 2",
        11: "SILVER 3",
        12: "GOLD 1",
        13: "GOLD 2",
        14: "GOLD 3",
        15: "PLATINUM 1",
        16: "PLATINUM 2",
        17: "PLATINUM 3",
        18: "DIAMOND 1",
        19: "DIAMOND 2",
        20: "DIAMOND 3",
        21: "ASCENDANT 1",
        22: "ASCENDANT 2",
        23: "ASCENDANT 3",
        24: "IMMORTAL 1",
        25: "IMMORTAL 2",
        26: "IMMORTAL 3",
        27: "RADIANT"
    }
    async with state.proxy() as data:
        username = data['username']
        password = data['password']
    client = ClientAcc(username=username,password=password)
    accounts = await client.start(account=True)
    rank = ranks[accounts['Rank']]
    last_match = accounts['last_match']
    VP = accounts['VP']
    Kingdom = accounts['Kingdom']
    RP = accounts['RadiantPoints']
    await call.message.edit_text(f'üèÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ\n'
                         f'üîπ–†–∞–Ω–≥:{rank}\n'
                         f'üîπVP:{VP}\n'
                         f'üîπKingdom:{Kingdom}\n'
                         f'üîπRP:{RP}\n'
                         f'üîπ–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞:{last_match}',reply_markup=auth_menu('Auth'))



@dp.callback_query_handler(cb.filter(action='support'),state='*')
async def support_cmnd(call:types.CallbackQuery,state:FSMContext):
    cur_state = await state.get_state()
    if cur_state:
        await state.reset_state()
    await call.message.edit_text(f'–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @meggameggamegga',reply_markup=auth_menu('Login'))

@dp.callback_query_handler(cb.filter(action='back'),state='*')
async def back_cmnd(call:types.CallbackQuery,state:FSMContext):
    cur_state = await state.get_state()
    if cur_state:
        await state.reset_state()
    welcome_message = (
        f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {call.from_user.first_name}!\n'
        f'–Ø –±–æ—Ç-—á–µ–∫–µ—Ä –∏–≥—Ä—ã Valorant. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–∫–∏–Ω–æ–≤ –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. '
        f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏".'
    )

    await call.message.edit_text(welcome_message, parse_mode=types.ParseMode.MARKDOWN, reply_markup=auth_menu('Login'))